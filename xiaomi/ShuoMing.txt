vue-cli:它会自动集成webpack,可以构建、打包、编译和入口的js,把vue单
    页面的应用程序搭建出来,而开发者专心只需'写页面'和'写路由'即可,它
    就是搭起了基础的架构
    
前言:这里所使用的方法和总结是工作经常要用到的,因此这里会记录
    小米网所使用到重要方法(要切记):
    0、git指令和github使用
    1、axios的interceptors(request/response的错误拦截器)
    2、前端三大跨域方式:CORS跨域、jsonp跨域、代理跨域
    3、项目架构搭建:跨域、目录结构、路由(封装)、错误拦截、sass模块的封装
    4、cookie、localStorage、sessionStorage三者的认识、区别和使用
    5、项目会经历不同阶段(dev(开发)、test(测试)、上线),不同阶段会调用
        不同的接口,所以可以遵循ES6模块化思想,把环境变量抽取到模块里面去
    6、slice(0,6):截取6条数据
    


1.git --version:查看git版本
2.git config --list:查看git的安装配置
3.git config --global user.name 'carson':设置用户名(是全局设置的)
4.git config --global user.email 'carsonkk@163.com':设置邮箱(是全局设置的)
5.git config --global credential.helper store:帮助vsCode记住账号和密码,每次提交都不用输入用户和密码
6.ssh-keygen -t rsa -C "carsonkk@163.com":SSH方式，生成秘钥和公钥
7.which -a  vue:查看vue的安装路径
8.注意:更新版本前,要确定不要影响到线上的生产环境
9.vue/cli:是搭架构的,自动集成webpack的东西,构建、打包、编译和入口的js

【课后学习:1封装Storage】

10.项目架构搭建:跨域、目录结构、路由、错误拦截、sass模块的封装
11.前端跨域的解决方案:3种跨域的方式
    什么是跨域:跨域是浏览器为了安全而做出的限制策略(防止其他人串改数据
              和抓取数据);浏览器请求必须遵循同源策略:同域名、同端口、
              同协议(任意一个不相同,接口是没法请求到的),前端有时请求
              不到后台接口就是跨域引起的;
              Access-Control-Allow-Credentials:true(后台设置为true就是把前端cookie带过去)
              Access-Control-Allow-Origin:www.baidu.com(这样就只允许百度访问)
12.前端流行的3中跨域:
    CORS跨域:服务端设置,前端直接调用(后台允许前端某个站点进行访问,CORS
             可以指定域名,比如只允许'腾讯网'调用,其他网站调用就拦截在
             外,后端更改即可),easy-mock就是CORS跨域

    JSONP跨域:前端适配,后台配合(前后台同时改造),前端要安装jsonp插件,
              jsonp会发一个callback参数过去,实际上后端会往callback
              写一些数据,这就需要前后端同时改造,也是非常流行的跨域方式,
              从浏览器可以看出,jsonp不是一个XHR请求,jsonp不是请求,
              它是一个js脚本,实际上是正常访问一个接口,只是传一个参数
              而已       

    代理跨域:它是通过修改nginx服务器配置来实现的,这种跨域是前端修改,
            后台不动;代理跨域可能涉及到修改服务器配置,有开发人员本
            地开发时没用nginx服务器,都是用node服务器,包括线上部署时
            都是用node服务器,这里在线上部署时就推荐使用nginx来实现、
            访问和部署前端技能项目,后端就选择node服务器,这种接口代理
            前后端都不改,只要让运维团队修改配置信息就好了;
            【代理跨域的方式是最安全的,别人拔取接口时根本不知道后端
            接口对应的是哪个服务,因为用代理已经磨平了,代理是最安全最
            简单,相比CORS,代理就需要配置nginx】



13.axios本身是promise结构,所以可以通过.then方式做链式调用
14.项目目录结构:
    (1)项目插件
        'vue-lazyload':懒加载
        'vue-axios':方便把axios挂载在vue实例里面去,简化导入组件的步骤
        'vue-cookie':前后端交互,是前端和后端的中间的通信
    (2)路由封装
        首页>产品栈>产品详情页>订单列表页>订单确认页>订单支付页

15.搭建项目架构:比如目录结构、路由、错误拦截、api统一封装。这些都是
    项目最重要的架构
16.项目目录结构设置:拿到设计稿一定要分析有多少页面,需要设定多少路由,哪
        些页面可以抽出成公用的组件进行复用,这些都是涉及到目录结构设置 
17.使用到的插件:scss(预编译器)、vue-lazyload(图片懒加载)、element-ui(组件)
                node-sass/sass-loader(css预处理)、
                vue-awesome-swiper(轮播)、vue-axios(挂载到实例)
                vue-cookie(前后端通信/交互的cookie)
                提示:以上这些插件都是通过开发经验,看到设计稿就知道要使用
                     什么插件,比如cookie、router、axios、vuex是用的,
                     vue-lazyload和scss是按实际需求使用
18.使用cookie来做前后端的通信的
19.在实际开发中,每个页面代表一个路由,但是要分析哪些路由是可以复用的,
    比如在router.js文件中,'home.js'和'order.js'就是父路由,其他页面
    有相似的部分,可以进行抽取

20.cookie(如登录后记住密码)、localStorage、sessionStorage三者的区别
    【详见幕布笔记】存储大小、有效期、路径限制、API、cookie会发送到浏览器,
                   而Storage只存储到浏览器端

21.Storage本身已经有API了,为什么还要封装Storage?
    localStorage和sessionStorage本身都已经有API了,它已经有setItem
    赋值,getItem取值,以及clear清空值

22.axios:
    axios语法更加强大和简洁,它提供了一个公共机制,帮助做前端的一些请求
    拦截和响应拦截

23.项目在开发过程中会经历不同的阶段,有'开发'、'测试'、'上线',但是在不同
    阶段是调用不同的接口的,
    //jsonp跨域的不同阶段调用接口:dev(开发)、test(测试),这种就直接在
      代码中修改也行,但是过多的污染了,人为去改也会出现很多线上问题,发生
      线上问题是很重大的,所以可以遵循ES6模块化思想,把环境变量抽取到模块
      里面去            
      axios.defaults.baseURL = 'http://(dev/test)www.baidu.com/api'  

24.做网站开发的时候一定要有安全距离,就是不管电脑屏幕分辨率是多大,要保
    证网站是有安全距离,比如设置为'1226px'时,电脑的分辨率是900/800的
    那么它也会按照1226px去展示,会撑开;有的网站是做响应式,会随着分辨率
    变大而响应地变大,但成本高,这要根据每个分辨率分别去做适配,通过
    '媒体查询'去判断浏览器的分辨率; 安全距离html,body{min-width:1226px}

25.scss是预编译,可以提前定义变量,通过加载变量的方式,动态实现css样式
26.弹框如何让它居中?可以是位移方式(translate:位移)
27.动画:可以使用css3的动画、vue的transition动画、UI组件的动画
28.图片懒加载:目的是提高首屏的加载速度,提升用户体验(浏览器自带是有缓存
    策略的)
29.svg跟图片(jpg,png)几乎一样的,但是区别是图片有固定的分辨率的,超过
    分辨率就会失真,而svg是质量图,不管屏幕放大或者缩小多少,图片都不会失真,
    svg比图片制作成本高很多
30.小米商城的页面只要包括:登录、首页、产品站、产品详情、购物车、订单、
    结算、支付,有上十个
31.登录成功后一般会返回一个token(令牌),在服务器和客户端之间传输,但在
    这里项目中是利用id作为唯一标识
32.当登录成功后,但是当网站刷新的时候,信息会丢失(比如用户name),因为vue
    的spa单页面数据是在内存当中存的,当页面一刷新,内存当中的数据都会消失,
    因此都会进行'getUser'接口进行拉取用户信息
33.Vuex只要用户数据传输和数据共享,在vue的组件实际是单向流通的,既然是单
    向流通的,那么就会遇到数据共享的问题,比如A和B两个组件没有关系,但是就
    想共用一个变量,当然是用cookie和Storage也行,但是不是主流的方法,
    这种情况就可以利用Vuex解决这个问题了,把数据保存到vuex中,各个组件都
    可以共用,不管是父组件还是子组件,都可以进行复用的共享
34.现在主流的框架都是状态管理框架,过去的框架都是非常粗暴的直接改变DOM,
    现在都不是直接改变DOM了,是用状态的方式,通过结合虚拟DOM的方式实现的
35.大多数插件(vuex、vue-router),都是通过vue.ues(vuex)来使用的,这样
    都会挂载到vue实例上,最后就可以通过this.***来获取的了
36.在vuex中当数据的状态改变时,组件有延迟时,要使用computed(计算属性)
37.position:fixed(fixed是相对浏览器窗口进行定位)
38.position:absolute(absolute是相对于整个HTML文档进行定位的)
39.使内容居中是有很多方式的,比如让一个弹框垂直方向和水平方式居中,方法有
    如1'定宽定高的(设置top50%,left50%,margin-top是负值,margin-left是负值)'
    如2'transform(位移)'
    如3'animation动画'
40.组件加载是需要时间的,优先加载app.vue,其次是加载navHeader.vue,但是
    navHeader是纯渲染,没有请求,而app.vue是执行'user'接口请求后把数据
    存储到vuex中,所以接口调用是需要花时间的,它是先从取值
    username:this.$store.state.username,这时它是空,没有值的,然后去
    执行app.vue的'get(/user)'的方法,就是这样才有延时

    

